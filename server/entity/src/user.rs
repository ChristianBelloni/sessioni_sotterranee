//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::sea_orm_active_enums::RoleKind;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub email: String,
    pub username: String,
    pub created_at: DateTimeWithTimeZone,
    pub last_updated_at: DateTimeWithTimeZone,
    pub role_kind: RoleKind,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::attending::Entity")]
    Attending,
    #[sea_orm(has_many = "super::interested::Entity")]
    Interested,
    #[sea_orm(has_many = "super::session::Entity")]
    Session,
}

impl Related<super::attending::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Attending.def()
    }
}

impl Related<super::interested::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Interested.def()
    }
}

impl Related<super::session::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Session.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
